{"/home/travis/build/npmtest/node-npmtest-nforce/test.js":"/* istanbul instrument in package npmtest_nforce */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nforce/lib.npmtest_nforce.js":"/* istanbul instrument in package npmtest_nforce */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nforce = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nforce = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nforce/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nforce && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nforce */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nforce\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nforce.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nforce.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nforce.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nforce.__dirname + '/lib.npmtest_nforce.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/index.js":"var request   = require('request');\nvar promises  = require('./lib/promises');\nvar qs        = require('querystring');\nvar url       = require('url');\nvar Record    = require('./lib/record');\nvar FDCStream = require('./lib/fdcstream');\nvar util      = require('./lib/util');\nvar errors    = require('./lib/errors');\nvar multipart = require('./lib/multipart');\nvar faye      = require('faye');\nvar mime      = require('mime');\nvar zlib      = require('zlib');\nvar _         = require('lodash');\n\n/*****************************\n * constants\n *****************************/\n\nvar AUTH_ENDPOINT      = 'https://login.salesforce.com/services/oauth2/authorize';\nvar TEST_AUTH_ENDPOINT = 'https://test.salesforce.com/services/oauth2/authorize';\nvar LOGIN_URI          = 'https://login.salesforce.com/services/oauth2/token';\nvar TEST_LOGIN_URI     = 'https://test.salesforce.com/services/oauth2/token';\nvar ENVS               = ['sandbox', 'production'];\nvar MODES              = ['multi', 'single'];\n\nvar plugins = {};\n\n/*****************************\n * connection object\n *****************************/\n\nvar Connection = function(opts) {\n  var self = this;\n\n  opts = _.defaults(opts || {}, {\n    clientId:         null,\n    clientSecret:     null,\n    redirectUri:      null,\n    authEndpoint:     AUTH_ENDPOINT,\n    testAuthEndpoint: TEST_AUTH_ENDPOINT,\n    loginUri:         LOGIN_URI,\n    testLoginUri:     TEST_LOGIN_URI,\n    apiVersion:       38,\n    environment:      'production',\n    mode:             'multi',\n    gzip:             false,\n    autoRefresh:      false,\n    onRefresh:        undefined,\n    timeout:          undefined,\n    oauth:            undefined,\n    username:         undefined,\n    password:         undefined,\n    securityToken:    undefined\n  });\n\n  // convert option values\n  opts.apiVersion = opts.apiVersion.toString().toLowerCase().replace('v', '').replace('.0', '');\n  opts.environment = opts.environment.toLowerCase();\n  opts.mode = opts.mode.toLowerCase();\n\n  self = _.assign(this, opts);\n\n  // validate options\n  if(!_.isString(this.clientId)) throw new Error('invalid or missing clientId');\n  if(!_.isString(this.redirectUri)) throw new Error('invalid or missing redirectUri');\n  if(!_.isString(this.authEndpoint)) throw new Error('invalid or missing authEndpoint');\n  if(!_.isString(this.testAuthEndpoint)) throw new Error('invalid or missing testAuthEndpoint');\n  if(!_.isString(this.loginUri)) throw new Error('invalid or missing loginUri');\n  if(!_.isString(this.testLoginUri)) throw new Error('invalid or missing testLoginUri');\n  if(!_.isBoolean(this.gzip)) throw new Error('gzip must be a boolean');\n  if(!_.isString(this.environment) || _.indexOf(ENVS, this.environment) === -1) {\n    throw new Error('invalid environment, only ' + ENVS.join(' and ') + ' are allowed');\n  }\n  if(!_.isString(this.mode) || _.indexOf(MODES, this.mode) === -1) {\n    throw new Error('invalid mode, only ' + MODES.join(' and ') + ' are allowed');\n  }\n  if(this.onRefresh && !_.isFunction(this.onRefresh)) throw new Error('onRefresh must be a function');\n  if(this.timeout && !_.isNumber(this.timeout)) throw new Error('timeout must be a number');\n\n  // parse api version\n  try {\n    this.apiVersion = 'v' + parseInt(this.apiVersion, 10) + '.0';\n  } catch (err) {\n    throw new Error('invalid apiVersion number');\n  }\n\n  // parse timeout into integer in case it's a floating point.\n  this.timeout = parseInt(this.timeout, 10);\n\n  // load plugins\n  if(opts.plugins && _.isArray(opts.plugins)) {\n    opts.plugins.forEach(function(pname) {\n      if(!plugins[pname]) throw new Error('plugin ' + pname + ' not found');\n      // clone the object\n      self[pname] = _.clone(plugins[pname]._fns);\n\n      // now bind to the connection object\n      _.forOwn(self[pname], function(fn, key) {\n        self[pname][key] = _.bind(self[pname][key], self);\n      });\n    });\n  }\n};\n\n/*****************************\n * auth getters/setters\n *****************************/\n\nConnection.prototype.getOAuth = function() {\n  return this.oauth;\n};\n\nConnection.prototype.setOAuth = function(oauth) {\n  this.oauth = oauth;\n};\n\nConnection.prototype.getUsername = function() {\n  return this.username;\n};\n\nConnection.prototype.setUsername = function(username) {\n  this.username = username;\n};\n\nConnection.prototype.getPassword = function() {\n  return this.password;\n};\n\nConnection.prototype.setPassword = function(password) {\n  this.password = password;\n};\n\nConnection.prototype.getSecurityToken = function() {\n  return this.securityToken;\n};\n\nConnection.prototype.setSecurityToken = function(token) {\n  this.securityToken = token;\n};\n\n/*****************************\n * helper methods\n *****************************/\n\nConnection.prototype._getOpts = function(d, c, opts) {\n  var data, cb, dt;\n\n  opts = opts || {};\n\n  if(_.isFunction(d)) {\n    cb = d;\n    dt = null;\n  } else {\n    cb = c;\n    dt = d;\n  }\n\n  if(opts.singleProp && dt && !_.isObject(dt)) {\n    data = {};\n    data[opts.singleProp] = dt;\n  } else if(_.isObject(dt)) {\n    data = dt;\n  } else {\n    data = {};\n  }\n\n  data.callback = cb;\n\n  if(this.mode === 'single' && !data.oauth) {\n    data.oauth = this.oauth;\n  }\n\n  if(opts.defaults && _.isObject(opts.defaults)) {\n    data = _.defaults(data, opts.defaults);\n  }\n  return data;\n};\n\n/*****************************\n * authentication methods\n *****************************/\n\nConnection.prototype.getAuthUri = function(opts) {\n  if(!opts) opts = {};\n\n  var self = this;\n\n  var urlOpts = {\n    'response_type': opts.responseType || 'code',\n    'client_id': self.clientId,\n    'redirect_uri': self.redirectUri\n  };\n\n  if(opts.display) {\n    urlOpts.display = opts.display.toLowerCase();\n  }\n\n  if(opts.immediate) {\n    urlOpts.immediate = opts.immediate;\n  }\n\n  if(opts.scope) {\n    if(_.isArray(opts.scope)) {\n      urlOpts.scope = opts.scope.join(' ');\n    } else {\n      urlOpts.scope = opts.scope;\n    }\n  }\n\n  if(opts.state) {\n    urlOpts.state = opts.state;\n  }\n\n  if(opts.nonce) {\n    urlOpts.nonce = opts.nonce;\n  }\n\n  if(opts.prompt) {\n    if(_.isArray(opts.prompt)) {\n      urlOpts.prompt = opts.prompt.join(' ');\n    } else {\n      urlOpts.prompt = opts.prompt;\n    }\n  }\n\n  if(opts.loginHint) {\n    urlOpts.login_hint = opts.loginHint;\n  }\n\n  if(opts.urlOpts) {\n    urlOpts = _.assign(urlOpts, opts.urlOpts);\n  }\n\n  var endpoint;\n\n  if(opts.authEndpoint) {\n    endpoint = opts.authEndpoint;\n  } else if(self.environment == 'sandbox') {\n    endpoint = this.testAuthEndpoint;\n  } else {\n    endpoint = this.authEndpoint;\n  }\n\n  return endpoint + '?' + qs.stringify(urlOpts);\n};\n\nConnection.prototype.authenticate = function(data, callback) {\n  var self = this;\n  var opts = _.defaults(this._getOpts(data, callback), {\n    executeOnRefresh: false,\n    oauth: {}\n  });\n  var resolver = promises.createResolver(opts.callback);\n\n  opts.uri = (self.environment == 'sandbox') ? this.testLoginUri : this.loginUri;\n  opts.method = 'POST';\n  opts.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n\n  var bopts = {\n    client_id: self.clientId,\n    client_secret: self.clientSecret\n  };\n\n  if(opts.code) {\n    bopts.grant_type = 'authorization_code';\n    bopts.code = opts.code;\n    bopts.redirect_uri = self.redirectUri;\n  } else if(opts.assertion) {\n    bopts.grant_type = 'assertion';\n    bopts.assertion_type = 'urn:oasis:names:tc:SAML:2.0:profiles:SSO:browser';\n    bopts.assertion = opts.assertion;\n  } else if(opts.username || this.username) {\n    bopts.grant_type = 'password';\n    bopts.username = opts.username || this.getUsername();\n    bopts.password = opts.password || this.getPassword();\n    if(opts.securityToken || this.getSecurityToken()) {\n      bopts.password += opts.securityToken || this.getSecurityToken();\n    }\n    if(this.mode === 'single') {\n      this.setUsername(bopts.username);\n      this.setPassword(bopts.password);\n      this.setSecurityToken(bopts.securityToken);\n    }\n  }\n\n  opts.body = qs.stringify(bopts);\n\n  this._apiAuthRequest(opts, function(err, res) {\n    if(err) return resolver.reject(err);\n    var old = _.clone(opts.oauth);\n    _.assign(opts.oauth, res);\n    if(opts.assertion) opts.oauth.assertion = opts.assertion;\n    if(self.onRefresh && opts.executeOnRefresh === true) {\n      self.onRefresh.call(self, opts.oauth, old, function(err3){\n        if(err3) return resolver.reject(err3);\n        else return resolver.resolve(opts.oauth);\n      });\n    } else {\n      resolver.resolve(opts.oauth);\n    }\n  });\n\n  return resolver.promise;\n};\n\nConnection.prototype.refreshToken = function(data, callback) {\n  var self = this;\n\n  var opts = this._getOpts(data, callback, {\n    defaults: {\n      executeOnRefresh: true\n    }\n  });\n\n  var resolver = promises.createResolver(opts.callback);\n\n  opts.uri = (this.environment == 'sandbox') ? this.testLoginUri : this.loginUri;\n  opts.method = 'POST';\n\n  var refreshOpts = {\n    client_id:     this.clientId,\n    redirect_uri:  this.redirectUri\n  };\n\n  // support for SAML-based token refreshes\n  if(!opts.oauth.refresh_token && (opts.oauth.assertion || opts.assertion)) {\n    refreshOpts.grant_type = 'assertion';\n    refreshOpts.assertion_type = 'urn:oasis:names:tc:SAML:2.0:profiles:SSO:browser';\n    refreshOpts.assertion = opts.assertion || opts.oauth.assertion;\n  } else {\n    refreshOpts.grant_type = 'refresh_token';\n    refreshOpts.refresh_token = opts.oauth.refresh_token;\n  }\n\n  // check for clientSecret and include if found\n  if(this.clientSecret) {\n    refreshOpts.client_secret = this.clientSecret;\n  }\n\n  opts.body = qs.stringify(refreshOpts);\n  opts.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n\n  this._apiAuthRequest(opts, function(err, res) {\n    if(err) return resolver.reject(err);\n    var old = _.clone(opts.oauth);\n    _.assign(opts.oauth, res);\n    if(opts.assertion) opts.oauth.assertion = opts.assertion;\n    if(self.onRefresh && opts.executeOnRefresh === true) {\n      self.onRefresh.call(self, opts.oauth, old, function(err3){\n        if(err3) return resolver.reject(err3);\n        else return resolver.resolve(opts.oauth);\n      });\n    } else {\n      resolver.resolve(opts.oauth);\n    }\n  });\n\n  return resolver.promise;\n};\n\nConnection.prototype.revokeToken = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'token'\n  });\n\n  if(this.environment === 'sandbox') {\n    opts.uri = 'https://test.salesforce.com/services/oauth2/revoke';\n  } else {\n    opts.uri = 'https://login.salesforce.com/services/oauth2/revoke';\n  }\n  opts.uri += '?token=' + opts.token;\n  if(opts.callbackParam) {\n    opts.uri += '&callback=' + opts.callbackParam;\n  }\n  return this._apiAuthRequest(opts, opts.callback);\n};\n\nConnection.prototype.getPasswordStatus = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'id'\n  });\n\n  var id = (opts.sobject) ? opts.sobject.getId() : opts.id;\n  opts.resource = '/sobjects/user/' + id + '/password';\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.updatePassword = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var id = (opts.sobject) ? opts.sobject.getId() : opts.id;\n  opts.resource = '/sobjects/user/' + id + '/password';\n  opts.method = 'POST';\n  opts.body = JSON.stringify({ newPassword: opts.newPassword });\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getIdentity = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  opts.uri = opts.oauth.id;\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\n/*****************************\n * system api methods\n *****************************/\n\nConnection.prototype.getVersions = function(callback) {\n  var opts = this._getOpts(null, callback);\n  opts.uri = 'http://na1.salesforce.com/services/data/';\n  opts.method = 'GET';\n  return this._apiAuthRequest(opts, callback);\n};\n\nConnection.prototype.getResources = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  opts.resource = '/';\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getSObjects = function(data, callback) {\n  var self = this;\n  var opts = this._getOpts(data, callback);\n  opts.resource = '/sobjects';\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getMetadata = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'type'\n  });\n  opts.resource = '/sobjects/' + opts.type;\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getDescribe = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'type'\n  });\n  opts.resource = '/sobjects/' + opts.type + '/describe';\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getLimits = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'type'\n  });\n  opts.resource = '/limits'\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\n/*****************************\n * crud methods\n *****************************/\n\nConnection.prototype.insert = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var type = opts.sobject.getType();\n  opts.resource = '/sobjects/' + type;\n  opts.method = 'POST';\n  if(type === 'document' || type === 'attachment' || type === 'contentversion') {\n    opts.multipart = multipart(opts);\n  } else {\n    opts.body = JSON.stringify(opts.sobject._getPayload(false));\n  }\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.update = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var type = opts.sobject.getType();\n  var id = opts.sobject.getId();\n  opts.resource = '/sobjects/' + type + '/' + id;\n  opts.method = 'PATCH';\n  if(type === 'document' || type === 'attachment' || type === 'contentversion') {\n    opts.multipart = multipart(opts);\n  } else {\n    opts.body = JSON.stringify(opts.sobject._getPayload(true));\n  }\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.upsert = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var type = opts.sobject.getType();\n  var extIdField = opts.sobject.getExternalIdField();\n  var extId = opts.sobject.getExternalId();\n  opts.resource = '/sobjects/' + type + '/' + extIdField + '/' + extId;\n  opts.method = 'PATCH';\n  opts.body = JSON.stringify(opts.sobject._getPayload(false));\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.delete = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var type = opts.sobject.getType();\n  var id = opts.sobject.getId();\n  opts.resource = '/sobjects/' + type + '/' + id;\n  opts.method = 'DELETE';\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getRecord = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var type = (opts.sobject) ? opts.sobject.getType() : opts.type;\n  var id = (opts.sobject) ? opts.sobject.getId() : opts.id;\n  var resolver = promises.createResolver(opts.callback);\n\n  opts.resource = '/sobjects/' + type + '/' + id;\n  opts.method = 'GET';\n\n  if(opts.fields) {\n    if(_.isString(opts.fields)) {\n      opts.fields = [opts.fields];\n    }\n    opts.resource += '?' + qs.stringify({ fields: opts.fields.join() });\n  }\n\n  this._apiRequest(opts, function(err, resp){\n    if(err) {\n      return resolver.reject(err);\n    }\n    if(!opts.raw) {\n      resp = new Record(resp);\n      resp._reset();\n    }\n    resolver.resolve(resp);\n  });\n\n  return resolver.promise;\n};\n\n/*****************************\n * blob/binary methods\n *****************************/\n\nConnection.prototype.getBody = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var type = (opts.sobject) ? opts.sobject.getType() : opts.type;\n\n  type = type.toLowerCase();\n\n  if(type === 'document') {\n    return this.getDocumentBody(opts, opts.callback);\n  } else if(type === 'attachment') {\n    return this.getAttachmentBody(opts, opts.callback);\n  } else if(type === 'contentversion') {\n    return this.getContentVersionData(opts, opts.callback);\n  } else {\n    var resolver = promises.createResolver(opts.callback);\n    // resolve async\n    process.nextTick(function(){\n      resolver.reject(new Error('invalid type: ' + type));\n    });\n    return resolver.promise;\n  }\n};\n\nConnection.prototype.getAttachmentBody = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var id = (opts.sobject) ? sobject.getId() : opts.id;\n  opts.resource = '/sobjects/attachment/' + id + '/body';\n  opts.method = 'GET';\n  opts.blob = true;\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getDocumentBody = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var id = (opts.sobject) ? sobject.getId() : opts.id;\n  opts.resource = '/sobjects/document/' + id + '/body';\n  opts.method = 'GET';\n  opts.blob = true;\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getContentVersionBody = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var id = (opts.sobject) ? sobject.getId() : opts.id;\n  opts.resource = '/sobjects/contentversion/' + id + '/body';\n  opts.method = 'GET';\n  opts.blob = true;\n  return this._apiRequest(opts, opts.callback);\n};\n\nConnection.prototype.getContentVersionData = function(data, callback) {\n  var opts = this._getOpts(data, callback);\n  var id = (opts.sobject) ? sobject.getId() : opts.id;\n  opts.resource = '/sobjects/contentversion/' + id + '/versiondata';\n  opts.method = 'GET';\n  opts.blob = true;\n  return this._apiRequest(opts, opts.callback);\n};\n\n/*****************************\n * query\n *****************************/\n\nConnection.prototype.query = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'query',\n    defaults: {\n      fetchAll: false,\n      includeDeleted: false,\n      raw: false\n    }\n  });\n  return this._queryHandler(opts, opts.callback);\n};\n\nConnection.prototype.queryAll = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'query',\n    defaults: {\n      fetchAll: false,\n      raw: false\n    }\n  });\n  opts.includeDeleted = true;\n  return this._queryHandler(opts, opts.callback);\n};\n\nConnection.prototype._queryHandler = function(data, callback) {\n  var self = this;\n  var recs = [];\n  var opts = this._getOpts(data, callback);\n  var resolver = promises.createResolver(opts.callback);\n\n  opts.method = 'GET';\n  opts.resource = '/query';\n\n  if(opts.includeDeleted) {\n    opts.resource += 'All';\n  }\n\n  opts.qs = {\n    q: opts.query\n  };\n\n  function handleResults(err, resp) {\n    if(err) {\n      return resolver.reject(err);\n    } else {\n      if(resp.records && resp.records.length > 0) {\n        _.each(resp.records, function(r) {\n          if(opts.raw) {\n            recs.push(r);\n          } else {\n            var rec = new Record(r);\n            rec._reset();\n            recs.push(rec);\n          }\n        });\n      }\n      if(opts.fetchAll && resp.nextRecordsUrl) {\n        self.getUrl({ url: resp.nextRecordsUrl, oauth: opts.oauth }, handleResults);\n      } else {\n        resp.records = recs;\n        return resolver.resolve(resp);\n      }\n    }\n  }\n\n  this._apiRequest(opts, handleResults);\n\n  return resolver.promise;\n};\n\n/*****************************\n * search\n *****************************/\n\nConnection.prototype.search = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'search',\n    defaults: {\n      raw: false\n    }\n  });\n  var resolver = promises.createResolver(opts.callback);\n\n  opts.resource = '/search';\n  opts.method = 'GET';\n  opts.qs = { q: opts.search };\n\n  this._apiRequest(opts, function(err, resp) {\n    if(err) {\n      return resolver.reject(err);\n    } else {\n      if(opts.raw || !resp.length) {\n        return resolver.resolve(resp);\n      } else {\n        var recs = [];\n        resp.forEach(function(r) {\n          recs.push(new Record(r));\n        });\n        return resolver.resolve(resp);\n      }\n    }\n  });\n\n  return resolver.promise;\n};\n\nConnection.prototype.getUrl = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'url'\n  });\n  opts.uri = opts.oauth.instance_url + data.url;\n  opts.method = 'GET';\n  return this._apiRequest(opts, opts.callback);\n};\n\n/*****************************\n * apex rest\n *****************************/\n\nConnection.prototype.apexRest = function(data, callback) {\n  var opts = this._getOpts(data, callback, {\n    singleProp: 'uri'\n  });\n  opts.uri = opts.oauth.instance_url + '/services/apexrest/'\n    // Allow for data.uri to start with or without a /\n    + ((data.uri.substring(0,1)==='/') ? data.uri.substring(1) : data.uri);\n  opts.method = opts.method || 'GET';\n  if(opts.urlParams) {\n    opts.qs = opts.urlParams;\n  }\n  return this._apiRequest(opts, opts.callback);\n};\n\n/*****************************\n * streaming api\n *****************************/\n\nConnection.prototype.createStreamClient = function(data) {\n  var self = this;\n  var opts = this._getOpts(data, null, {\n    defaults: {\n      apiVersion: self.apiVersion,\n      timeout: null,\n      retry: null\n    }\n  });\n  return new FDCStream.Client(opts);\n};\n\nConnection.prototype.subscribe = function(data) {\n  var opts = this._getOpts(data, null, {\n    singleProp: 'topic',\n    defaults: {\n      isSystem: false,\n      timeout: null,\n      retry: null\n    }\n  });\n\n  var client = this.createStreamClient(opts);\n  return client.subscribe(opts);\n};\n\n// keeping this method for backwards compatibility\n// proxies to connection.subscribe now\nConnection.prototype.stream = function(data) {\n  return this.subscribe(data);\n};\n\n/*****************************\n * auto-refresh\n *****************************/\n\nConnection.prototype.autoRefreshToken = function(data, callback) {\n  var self = this;\n\n  var opts = this._getOpts(data, callback, {\n    defaults: {\n      executeOnRefresh: true\n    }\n  });\n\n  var resolver = promises.createResolver(opts.callback);\n\n  var refreshOpts = {\n    oauth: opts.oauth,\n    executeOnRefresh: opts.executeOnRefresh\n  };\n\n  // auto-refresh: refresh token\n  if(opts.oauth.refresh_token) {\n    Connection.prototype.refreshToken.call(self, refreshOpts, function(err, res) {\n      if(err) {\n        return resolver.reject(err);\n      } else {\n        return resolver.resolve(res);\n      }\n    });\n    // auto-refresh: un/pw\n  } else {\n    Connection.prototype.authenticate.call(self, refreshOpts, function(err, res) {\n      if(err) {\n        return resolver.reject(err);\n      } else {\n        return resolver.resolve(res);\n      }\n    });\n  }\n\n  return resolver.promise;\n};\n\n/*****************************\n * internal api methods\n *****************************/\n\nConnection.prototype._apiAuthRequest = function(opts, callback) {\n\n  var self = this;\n\n  var resolver = opts._resolver || promises.createResolver(callback);\n\n  // set timeout\n  if(this.timeout) {\n    opts.timeout = this.timeout;\n  }\n\n  // process request opts\n  if(opts.requestOpts) {\n    _.merge(opts, opts.requestOpts);\n  }\n\n  request(opts, function(err, res, body){\n    // request returned an error\n    if(err) return resolver.reject(err);\n\n    // request didn't return a response. sumptin bad happened\n    if(!res) return resolver.reject(errors.emptyResponse());\n\n    if(body && util.isJsonResponse(res)) {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        return resolver.reject(errors.invalidJson());\n      }\n    }\n\n    if(res.statusCode === 200) {\n      // detect oauth response for single mode\n      if(body.access_token) {\n        if(self.mode === 'single') {\n          self.oauth = body;\n        }\n      }\n      return resolver.resolve(body);\n    } else {\n      var e = new Error(body.error + ' - ' + body.error_description);\n      e.statusCode = res.statusCode;\n      return resolver.reject(e);\n    }\n\n  });\n\n  return resolver.promise;\n};\n\nConnection.prototype._apiRequest = function(opts, callback) {\n\n  /**\n   * options:\n   * - sobject\n   * - uri\n   * - callback\n   * - oauth\n   * - multipart\n   * - method\n   * - encoding\n   * - body\n   * - qs\n   * - headers\n   */\n\n  var self     = this;\n  var ropts    = {};\n  var resolver = opts._resolver || promises.createResolver(callback);\n  var sobject  = opts.sobject;\n\n  // construct uri\n\n  if(opts.uri) {\n    ropts.uri = opts.uri;\n  } else {\n    if(!opts.resource || opts.resource.charAt(0) !== '/') {\n      opts.resource = '/' + (opts.resource || '');\n    }\n    ropts.uri = [\n      opts.oauth.instance_url,\n      '/services/data/',\n      this.apiVersion,\n      opts.resource\n    ].join('');\n  }\n\n  // set blob mode\n  if(opts.blob === true) {\n    ropts.encoding = null;\n  }\n\n  ropts.method = opts.method || 'GET';\n\n  // set accept headers\n  ropts.headers = {\n    'Accept': 'application/json;charset=UTF-8'\n  };\n\n  // set oauth header\n  if(opts.oauth) {\n    ropts.headers['Authorization'] = 'Bearer ' + opts.oauth.access_token;\n  }\n\n  // set gzip headers\n  if(opts.method === 'GET' && this.gzip === true) {\n    ropts.headers['Accept-Encoding'] = 'gzip';\n    ropts.encoding = null;\n  }\n\n  // set content-type\n  if(opts.multipart) {\n    ropts.headers['content-type'] = 'multipart/form-data';\n    ropts.multipart = opts.multipart;\n    ropts.preambleCRLF = true;\n    ropts.postambleCRLF = true;\n  } else {\n    ropts.headers['content-type'] = 'application/json';\n  }\n\n  // set additional user-supplied headers\n  if(opts.headers) {\n    for(var item in opts.headers) {\n      ropts.headers[item] = opts.headers[item];\n    }\n  }\n\n  // set body\n  if(opts.body) {\n    ropts.body = opts.body;\n  }\n\n  // process qs\n  if(opts.qs) {\n    ropts.qs = opts.qs;\n  }\n\n  // process request opts\n  if(opts.requestOpts) {\n    _.merge(ropts, opts.requestOpts);\n  }\n\n  // set timeout\n  if(this.timeout) {\n    ropts.timeout = this.timeout;\n  }\n\n  // initiate the request\n  request(ropts, function(err, res, body) {\n\n    // request returned an error\n    if(err) return resolver.reject(err);\n\n    // request didn't return a response. Sumptin bad happened\n    if(!res) return resolver.reject(errors.emptyResponse());\n\n    // salesforce returned no body but an error in the header\n    if(!body && res.headers && res.headers.error) {\n      var e = new Error(res.headers.error);\n      e.statusCode = res.statusCode;\n      return resolver.reject(e);\n    }\n\n    function processResponse() {\n      // attempt to parse the json now\n      if(util.isJsonResponse(res)) {\n        if(body) {\n          try {\n            body = JSON.parse(body);\n          } catch (e) {\n            return resolver.reject(errors.invalidJson());\n          }\n        }\n      }\n\n      // salesforce returned an ok of some sort\n      if(res.statusCode >= 200 && res.statusCode <= 204) {\n        // attach the id back to the sobject on insert\n        if(sobject) {\n          if(sobject._reset) {\n            sobject._reset();\n          }\n          if(body && _.isObject(body) && body.id) {\n            sobject._fields.id = body.id;\n          }\n        }\n        return resolver.resolve(body);\n      }\n\n      // error handling\n      var e;\n\n      // error: no body\n      if(!body) {\n        e = new Error('Salesforce returned no body and status code ' + res.statusCode);\n      // error: array body\n      } else if (_.isArray(body) && body.length > 0) {\n        e = new Error(body[0].message);\n        e.errorCode = body[0].errorCode;\n        e.body = body;\n      // error: string body\n      } else if(_.isString(body)) {\n        e = new Error(body);\n        e.errorCode = body;\n        e.body = body;\n      } else {\n        e = new Error('Salesforce returned an unrecognized error ' + res.statusCode);\n        e.body = body;\n      }\n\n      e.statusCode = res.statusCode;\n\n      // confirm auto-refresh support\n      if(e.errorCode &&\n          (e.errorCode === 'INVALID_SESSION_ID' || e.errorCode === 'Bad_OAuth_Token') &&\n          self.autoRefresh === true &&\n          (opts.oauth.refresh_token || (self.getUsername() && self.getPassword())) &&\n          !opts._retryCount) {\n\n        // attempt the autorefresh\n        Connection.prototype.autoRefreshToken.call(self, opts, function(err2, res2) {\n          if(err2) {\n            return resolver.reject(err2);\n          } else {\n            opts._retryCount = 1;\n            opts._resolver = resolver;\n            return Connection.prototype._apiRequest.call(self, opts);\n          }\n        });\n\n      } else {\n        return resolver.reject(e);\n      }\n    }\n\n    // check for gzip compression\n    if(res.headers && res.headers['content-encoding'] === 'gzip' && body) {\n      //  response is compressed - decompress it\n      zlib.gunzip(body, function(err, decompressed) {\n        if (err) return resolver.reject(err);\n        body = decompressed;\n        processResponse();\n      });\n    } else {\n      processResponse();\n    }\n\n  });\n\n  return resolver.promise;\n};\n\n/*****************************\n * plugin system\n *****************************/\n\nfunction Plugin(opts) {\n  this.namespace = opts.namespace;\n  this._fns = {};\n  this.util = _.clone(util);\n}\n\nPlugin.prototype.fn = function(fnName, fn) {\n  if(typeof fn !== 'function') {\n    throw new Error('invalid function provided');\n  }\n  if(typeof fnName !== 'string') {\n    throw new Error('invalid function name provided');\n  }\n  this._fns[fnName] = fn;\n\n  return this;\n};\n\n/*****************************\n * exports\n *****************************/\n\nmodule.exports.util = util;\n\nmodule.exports.plugin = function(opts) {\n  if(typeof opts === 'string') {\n    opts = { namespace: opts };\n  }\n  if(!opts || !opts.namespace) {\n    throw new Error('no namespace provided for plugin');\n  }\n  opts = _.defaults(opts, {\n    override: false\n  });\n  if(plugins[opts.namespace] && opts.override !== true) {\n    throw new Error('a plugin with namespace ' + opts.namespace + ' already exists');\n  }\n  plugins[opts.namespace] = new Plugin(opts);\n  return plugins[opts.namespace];\n};\n\n// connection creation\nmodule.exports.createConnection = function(opts) {\n  return new Connection(opts);\n};\n\nmodule.exports.createSObject = function(type, fields) {\n  var data = fields || {};\n  data.attributes = {\n    type: type\n  };\n  var rec = new Record(data);\n  return rec;\n};\n\nmodule.exports.Record  = Record;\nmodule.exports.version = require('./package.json').version;\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/lib/promises.js":"var P = require('bluebird');\nvar _ = require('lodash');\n\n// add back in deferreds\nvar deferred = function() {\n  var resolve, reject;\n  var promise = new P(function() {\n    resolve = arguments[0];\n    reject = arguments[1];\n  });\n  return {\n    resolve: resolve,\n    reject: reject,\n    promise: promise\n  };\n};\n\nvar createResolver = function(callback) {\n  var defer;\n  if(!callback || !_.isFunction(callback)) {\n    defer = deferred();\n  }\n  return {\n    resolve: function(data) {\n      if(callback) callback(null, data);\n      else if(defer) defer.resolve(data);\n    },\n    reject: function(err) {\n      if(callback) callback(err);\n      else if(defer) defer.reject(err);\n    },\n    promise: (defer) ? defer.promise : undefined\n  };\n};\n\nmodule.exports.Promise        = P;\nmodule.exports.deferred       = deferred;\nmodule.exports.createResolver = createResolver;\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/lib/record.js":"var _ = require('lodash');\n\nvar Record = function(data) {\n\n  var self = this;\n\n  this.attributes = {};\n  this._changed = [];\n  this._previous = {};\n\n  this._fields = _.transform(data, function(result, val, key) {\n    key = key.toLowerCase();\n    if(key !== 'attributes' && key !== 'attachment') {\n      result[key.toLowerCase()] = val;\n      self._changed.push(key);\n    } else if(key === 'attributes') {\n      self.attributes = val;\n    } else if (key === 'attachment') {\n      self._attachment = val;\n    }\n  });\n\n};\n\nRecord.prototype.get = function(field) {\n  field = field.toLowerCase();\n  if(field && this._fields[field] !== undefined) {\n    return this._fields[field];\n  }\n};\n\nRecord.prototype.set = function(field, value) {\n  var self = this;\n  var data = {};\n  if(arguments.length === 2) {\n    data[field.toLowerCase()] = value;\n  } else {\n    data = _.transform(field, function(result, val, key) {\n      result[key.toLowerCase()] = val;\n    });\n  }\n\n  Object.keys(data).forEach(function(key) {\n    key = key.toLowerCase();\n    if(key === 'attachment') {\n      self._attachment = data[key];\n      return;\n    }\n    if(!self._fields[key] || data[key] !== self._fields[key]) {\n      if(_.indexOf(self._changed, key) === -1) {\n        self._changed.push(key);\n      }\n      if(!self._previous[key]) {\n        self._previous[key] = self._fields[key];\n      }\n      self._fields[key] = data[key];\n    }\n  });\n\n};\n\nRecord.prototype.getId = function() {\n  return this._fields.id;\n};\n\nRecord.prototype.setId = function(id) {\n  this._fields.id = id;\n};\n\nRecord.prototype.getType = function() {\n  return (this.attributes.type) ? this.attributes.type.toLowerCase() : undefined;\n};\n\nRecord.prototype.getUrl = function() {\n  return this.attributes.url;\n};\n\nRecord.prototype.isType = function(type) {\n  if(!_.isString(type)) return false;\n  type = type.toLowerCase();\n  return (type === this.getType());\n};\n\nRecord.prototype.getExternalId = function() {\n  return this.attributes.externalId;\n};\n\nRecord.prototype.getExternalIdField = function() {\n  return this.attributes.externalIdField;\n};\n\nRecord.prototype.setExternalId = function(field, value) {\n  field = field.toLowerCase();\n  this.attributes.externalIdField = field;\n  this.attributes.externalId = value;\n  this.set(field, value);\n};\n\nRecord.prototype.getAttachment = function() {\n  return this._attachment || {};\n};\n\nRecord.prototype.setAttachment = function(fileName, body) {\n  this._attachment = { fileName: fileName, body: body };\n};\n\nRecord.prototype.getFileName = function() {\n  return (this._attachment) ? this._attachment.fileName : undefined;\n};\n\nRecord.prototype.setFileName = function(fileName) {\n  this._attachment = this._attachment || {};\n  this._attachment.fileName = fileName;\n};\n\nRecord.prototype.getBody = function() {\n  return (this._attachment) ? this._attachment.body : undefined;\n};\n\nRecord.prototype.setBody = function(body) {\n  this._attachment = this._attachment || {};\n  this._attachment.body = body;\n};\n\nRecord.prototype.hasChanged = function(field) {\n  if(!this._changed || this._changed.length === 0) {\n    return false;\n  } else if(!field) {\n    return true;\n  } else {\n    if(_.indexOf(this._changed, field.toLowerCase()) !== -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nRecord.prototype.changed = function() {\n  var self = this;\n  var changed = {};\n  _.forEach(this._changed, function(field) {\n    changed[field] = self._fields[field];\n  });\n  return changed;\n};\n\nRecord.prototype.previous = function(field) {\n  if(field) field = field.toLowerCase();\n  if(_.isString(field)) {\n    if(this._previous[field]) {\n      return this._previous[field];\n    } else {\n      return;\n    }\n  } else {\n    return this._previous || {};\n  }\n};\n\nRecord.prototype.toJSON = function() {\n  var data = this._getPayload(false);\n  if(!data.id && this.getId()) {\n    data.id = this.getId();\n  }\n  return data;\n};\n\nRecord.prototype._reset = function() {\n  this._changed = [];\n  this._previous = {};\n};\n\nRecord.prototype._getPayload = function(changedOnly) {\n  var self = this;\n  changedOnly = (changedOnly === true);\n\n  var data = _.transform(this._fields, function(result, value, key) {\n    if(changedOnly && _.indexOf(self._changed, key) === -1) return;\n    key = key.toLowerCase();\n    if(key !== 'id' && key !== self.getExternalIdField()) {\n      result[key] = value;\n    }\n  });\n\n  return data;\n};\n\nmodule.exports = Record;\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/lib/fdcstream.js":"var util   = require('util');\nvar events = require('events');\nvar faye   = require('faye');\n\nfunction Subscription(opts, client) {\n  var self = this;\n  this.client = client;\n  opts = opts || {};\n\n  events.EventEmitter.call(this);\n\n  if(opts.isSystem) {\n    this._topic = '/systemTopic/' + opts.topic;\n  } else {\n    this._topic = '/topic/' + opts.topic;\n  }\n\n  this._sub = client._fayeClient.subscribe(this._topic, function(d) {\n    self.emit('data', d);\n  });\n\n  this._sub.callback(function(){\n    self.emit('connect');\n  });\n\n  this._sub.errback(function(err) {\n    self.emit('error', err);\n  });\n}\n\nutil.inherits(Subscription, events.EventEmitter);\n\nSubscription.prototype.cancel = function() {\n  if(this._sub) this._sub.cancel();\n};\n\n// Client definition\n\nfunction Client(opts) {\n  var self = this;\n  opts = opts || {};\n\n  events.EventEmitter.call(this);\n\n  this._endpoint = opts.oauth.instance_url + '/cometd/' + opts.apiVersion.substring(1);\n  this._fayeClient = new faye.Client(this._endpoint, {\n    timeout: opts.timeout,\n    retry: opts.retry\n  });\n  this._fayeClient.setHeader('Authorization', 'Bearer ' + opts.oauth.access_token);\n\n  this._fayeClient.on('transport:up', function() {\n    self.emit('connect');\n  });\n\n  this._fayeClient.on('transport:down', function() {\n    self.emit('disconnect');\n  });\n}\n\nutil.inherits(Client, events.EventEmitter);\n\nClient.prototype.subscribe = function(opts) {\n  opts = opts || {};\n  return new Subscription(opts, this);\n};\n\nClient.prototype.disconnect = function(opts) {\n  this._fayeClient.disconnect();\n};\n\nmodule.exports.Subscription = Subscription;\nmodule.exports.Client       = Client;\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/lib/util.js":"var _        = require('lodash');\nvar promises = require('./promises');\n\nvar util = {};\n\nutil.isJsonResponse = function(res) {\n  return res.headers &&\n    res.headers['content-type'] &&\n    res.headers['content-type'].split(';')[0].toLowerCase() === 'application/json';\n};\n\nutil.isChunkedEncoding = function(res) {\n  return res.headers &&\n    res.headers['transfer-encoding'] &&\n    res.headers['transfer-encoding'].toLowerCase() === 'chunked';\n};\n\nutil.findId = function(data) {\n  if(data.getId && _.isFunction(data.getId)) {\n    return data.getId();\n  } else if(data.Id) {\n    return data.Id;\n  } if(data.id) {\n    return data.id;\n  } else if(data.ID) {\n    return data.ID;\n  }\n};\n\nutil.validateOAuth = function(oauth) {\n  if(!oauth || !oauth.instance_url || !oauth.access_token) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nutil._ = _;\n\nutil.promises = promises;\n\nmodule.exports = util;\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/lib/errors.js":"module.exports = {\n\n  nonJsonResponse: function() {\n    return new Error('Non-JSON response from Salesforce');\n  },\n\n  invalidJson: function() {\n    return new Error('Invalid JSON response from Salesforce');\n  },\n\n  emptyResponse: function() {\n    return new Error('Unexpected empty response');\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/lib/multipart.js":"var mime = require('mime');\n\nmodule.exports = function (opts) {\n  var type      = opts.sobject.getType();\n  var entity    = (type === 'contentversion') ? 'content' : type;\n  var name      = (type === 'contentversion') ? 'VersionData' : 'Body';\n  var fileName  = opts.sobject.getFileName();\n  var isPatch   = (opts.method === 'PATCH') ? true : false;\n  var multipart = [];\n\n  multipart.push({\n    'content-type': 'application/json',\n    'content-disposition': 'form-data; name=\"entity_' + entity + '\"',\n    body: JSON.stringify(opts.sobject._getPayload(isPatch))\n  });\n\n  multipart.push({\n    'content-type': mime.lookup(fileName),\n    'content-disposition': 'form-data; name=\"' + name + '\"; filename=\"' + fileName + '\"',\n    body: opts.sobject.getBody()\n  });\n\n  return multipart;\n};\n","/home/travis/build/npmtest/node-npmtest-nforce/node_modules/nforce/Gulpfile.js":"var gulp    = require('gulp');\nvar seq     = require('run-sequence');\nvar jshint  = require('gulp-jshint');\nvar stylish = require('jshint-stylish');\nvar spawn   = require('child_process').spawn;\n\nvar files = {\n  js: [\n    './*.js',\n    './lib/*.js',\n    './test/*.js',\n    './examples/*.js'\n  ]\n};\n\n// run jshint tasks across all js files\ngulp.task('lint', function() {\n  return gulp.src(files.js)\n  .pipe(jshint())\n  .pipe(jshint.reporter(stylish));\n});\n\n// run mocha tests\ngulp.task('test', function(cb) {\n\n  var pkg = require('./package.json');\n\n  if(!pkg || !pkg.scripts || !pkg.scripts.test) {\n    return cb(new Error('No test script provided in package.json'));\n  }\n\n  var args = pkg.scripts.test.split(' ');\n  var cmd  = args.shift();\n\n  var test = spawn(cmd, args, { stdio: 'inherit' });\n\n  test.on('close', function(code) {\n    if(code !== 0) {\n      return cb(new Error('mocha test failures'));\n    }\n    cb();\n  });\n});\n\n// set up a file watcher and run jshint\ngulp.task('watch', function() {\n  gulp.watch(files.js, ['lint']);\n});\n\n// default task\ngulp.task('default', function(cb) {\n  seq('lint', 'test', cb);\n});\n"}